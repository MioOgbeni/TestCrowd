@using TestCrowd.DataAccess.Model.Tests
@model IList<TestGroup>
@{
    ViewBag.Title = "Test Groups";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <div class="card py-2">
                <div class="card-body pl-2 pt-1 pb-0">
                    <div class="row pl-3">
                        <div class="mb-1 mr-1 input-group pl-0 col-2">
                            <input class="form-control form-control-user" id="SearchBox" name="SearchBox" placeholder="Search by name" type="text" autofocus value=@ViewBag.CurrentSearch>
                            <div class="input-group-append" id="SearchButton">
                                <button class="btn btn-primary" type="button">
                                    <i class="fas fa-search fa-sm"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
@if (Model.Count > 0)
{
    <div class="row">
        @foreach (var testGroup in Model)
        {
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-bottom-primary shadow h-100 py-2">
                    <div class="card-body">
                        <p class="text-xl-center font-weight-bold text-primary text-uppercase mb-1 text-center">@testGroup.Name</p>
                        <p class="text-xs mb-1 text-center">from company @testGroup.Creator.CompanyName</p>
                        <br />
                        <div class="row no-gutters mb-3">
                            <div class="col-md-6">
                                <div class="font-weight-bold text-primary">Skill difficulty:</div>
                            </div>
                            <div class="col-md-6">
                                @{
                                    for (var i = 0; i < testGroup.SkillDificulty; i++)
                                    {
                                        <span class="icon text-primary"><i class="fas fa-star"></i></span>
                                    }
                                    for (var i = 0; i < 5 - testGroup.SkillDificulty; i++)
                                    {
                                        <span class="icon text-primary"><i class="far fa-star"></i></span>
                                    }
                                }
                            </div>
                        </div>
                        <div class="row no-gutters mb-3">
                            <div class="col-md-6">
                                <div class="font-weight-bold text-primary">Time difficulty:</div>
                            </div>
                            <div class="col-md-6">
                                @{
                                    for (var i = 0; i < testGroup.TimeDificulty; i++)
                                    {
                                        <span class="icon text-primary"><i class="fas fa-star"></i></span>
                                    }
                                    for (var i = 0; i < 5 - testGroup.TimeDificulty; i++)
                                    {
                                        <span class="icon text-primary"><i class="far fa-star"></i></span>
                                    }
                                }
                            </div>
                        </div>
                        <br />
                        <div class="row no-gutters mb-3">
                            <div class="col-md-6">
                                <div class="font-weight-bold text-primary">Test count:</div>
                            </div>
                            <div class="col-md-6">
                                @testGroup.TestCases.Count <span class="icon text-primary"><i class="fas fa-bug"></i></span>
                            </div>
                        </div>
                        <hr/>
                        <div class="row no-gutters mb-3">
                            <div class="font-weight-bold text-primary">You gain @((int)((testGroup.RewardMultiplier - 1) * 100))<span class="icon text-primary"><i class="fas fa-percentage"></i></span> more <span class="icon text-primary"><i class="fas fa-coins"></i></span> on this tests</div>
                        </div>
                        <div class="row no-gutters justify-content-center">
                            @Html.ActionLink("Details", "TestGroupDetails", new {testGroupGuid = testGroup.Id}, new {@class= "btn btn-primary text-white text-uppercase mr-1" })
                            @Ajax.ActionLink("Take tests in group", "TakeGroupFromGrid", new { page = 1, searchTerm = ViewBag.CurrentSearch, testGroupGuid = testGroup.Id }, new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = "dynamicContent" }, new { @class = "btn btn-success text-white text-uppercase" })
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="row">
        <div class="col d-flex justify-content-end mb-3">
            @if (ViewBag.Pages != null)
            {
                @Ajax.ActionLink("First", "TesterTestGroups", new { page = 1, searchTerm = ViewBag.CurrentSearch }, new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = "dynamicContent" }, new { @class = "btn btn-primary text-white text-uppercase mr-1" })
                for (int i = 1; i <= ViewBag.Pages; i++)
                {
                    if (ViewBag.CurrentPage == 1)
                    {
                        if (i >= (ViewBag.CurrentPage) && i <= (ViewBag.CurrentPage + 2))
                        {
                            if (ViewBag.CurrentPage == i)
                            {
                                @Ajax.ActionLink(i.ToString(), "TesterTestGroups", new { page = i, searchTerm = ViewBag.CurrentSearch }, new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = "dynamicContent" }, new { @class = "btn btn-primary border-primary text-white text-uppercase mr-1" })

                            }
                            else
                            {
                                @Ajax.ActionLink(i.ToString(), "TesterTestGroups", new { page = i, searchTerm = ViewBag.CurrentSearch }, new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = "dynamicContent" }, new { @class = "btn btn-light border-primary text-primary text-uppercase mr-1" })

                            }
                        }
                    }
                    else if (ViewBag.CurrentPage == ViewBag.Pages)
                    {
                        if (i >= (ViewBag.CurrentPage - 2) && i <= (ViewBag.CurrentPage))
                        {
                            if (ViewBag.CurrentPage == i)
                            {
                                @Ajax.ActionLink(i.ToString(), "TesterTestGroups", new { page = i, searchTerm = ViewBag.CurrentSearch }, new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = "dynamicContent" }, new { @class = "btn btn-primary border-primary text-white text-uppercase mr-1" })

                            }
                            else
                            {
                                @Ajax.ActionLink(i.ToString(), "TesterTestGroups", new { page = i, searchTerm = ViewBag.CurrentSearch }, new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = "dynamicContent" }, new { @class = "btn btn-light border-primary text-primary text-uppercase mr-1" })

                            }
                        }
                    }
                    else
                    {
                        if (i >= (ViewBag.CurrentPage - 1) && i <= (ViewBag.CurrentPage + 1))
                        {
                            if (ViewBag.CurrentPage == i)
                            {
                                @Ajax.ActionLink(i.ToString(), "TesterTestGroups", new { page = i, searchTerm = ViewBag.CurrentSearch }, new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = "dynamicContent" }, new { @class = "btn btn-primary border-primary text-white text-uppercase mr-1" })

                            }
                            else
                            {
                                @Ajax.ActionLink(i.ToString(), "TesterTestGroups", new { page = i, searchTerm = ViewBag.CurrentSearch }, new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = "dynamicContent" }, new { @class = "btn btn-light border-primary text-primary text-uppercase mr-1" })

                            }
                        }
                    }

                }
                @Ajax.ActionLink("Last", "TesterTestGroups", new { page = ViewBag.Pages, searchTerm = ViewBag.CurrentSearch }, new AjaxOptions() { InsertionMode = InsertionMode.Replace, UpdateTargetId = "dynamicContent" }, new { @class = "btn btn-primary text-white text-uppercase mr-1" })
            }
        </div>
    </div>
}
else
{
    <div class="text-center">
        <p class="lead text-gray-800 mb-5"></p>
        <p class="text-gray-500 mb-0">There's nothing to match your filtering...</p>
    </div>
}
</div>

<script>
    $(document).ready(function () {
        $('#SearchButton').click(function() {
            var searchTerm = document.getElementById("SearchBox").value;
            $.ajax({
                url: '@Url.Action("TesterTestGroups","TestGroups")' ,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: { 'page': @ViewBag.CurrentPage, 'searchTerm' : searchTerm}
            }).done(function (partialViewResult) {
                $("#dynamicContent").html(partialViewResult);
            });
        });
    });
</script>
